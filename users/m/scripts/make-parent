#!/bin/sh

clear

# Find the correct directory to make in when trying to build from the source
# dir, in order to make out-of-source builds easier.
#
# Look for a build directory and if found try to do a debug and/or release build
# for the matching file.
#
# This variant of the wrapper also walks up until it finds a Makefile
clear
MAKEPRG=`which make`
declare -a BUILD_DIRS=("build" "release" "build64" "build32")

# Load patterns for overriding a Makefile for specific directories
declare -a directorynames
declare -a directorypatterns

while IFS=\= read value; do
	v=$(echo "${value}" | sed 's,:[[:space:]]*#[[:space:]]*my-make-pattern:.*,,')
    directorynames+=($v)

	v=$(echo "${value}" | sed 's,.*:[[:space:]]*#[[:space:]]*my-make-pattern:[[:space:]]*,,')
    directorypatterns+=($v)
done < <( grep -r my-make-pattern: ~/Makefiles/* )

if [ "x${BUILDNAME}" == "x" ]; then
	BUILDNAME="main"
fi

doBuild() {
	DIR=$1; shift
    FILE=$1; shift

    if [ -e "${FILE}" ]; then
        # The specified Makefile exists
        :
    elif [ -e "${DIR}/Makefile" ]; then
        # Use the Makefile in the directory
        FILE="${DIR}/Makefile"
    else
        # There is no Makefile
        return 0
    fi

    echo ""
    echo ""
    echo "make: Found build directory '${DIR}'"
    echo ""
    echo $MAKEPRG --directory="${DIR}" --file="${FILE}" $@
    $MAKEPRG --directory="${DIR}" --file="${FILE}" $@
    return $?

	return 0
}

findDirMakefile() {
    let i=0
    while (( ${#directorypatterns[@]} > i )); do
        name="${directorynames[i]}"
        regx="${directorypatterns[i++]}"

        echo "$1" | grep "${regx}" > /dev/null 2>&1
        if [ $? -eq 0 ]; then
            echo "${name}"
            return 0
        fi
    done

    return 1
}

cwd=$PWD
rel=""

name=`findDirMakefile "${cwd}"`
if [ $? -eq 0 ]; then
    doBuild "${cwd}" "${name}" $@
    exit $?
fi
if [ -e Makefile ]; then
	# Just build here
	echo $MAKEPRG $@
	$MAKEPRG $@
	exit $?
fi


# Find the root of our source tree. This is identified with a Makefile that
# contains a comment with "source-tree-root"
while [ "x$cwd" != "x/" ]; do
	# Split the filename and the parent dir name
	nam=${cwd##*/}

	par=${cwd%/*}
	par=${par:-/}

    name=`findDirMakefile "${cwd}"`
    if [ $? -eq 0 ]; then
        doBuild "${cwd}" "${name}" $@
        exit $?
    fi

	# If there is a Makefile then we have clearly gone too far
	if [ -e "${cwd}/Makefile" ]; then
		grep -i source-tree-root "${cwd}/Makefile" >/dev/null 2>&1
		if [ $? -eq 0 ]; then
			# Look for various build dirs that we should try
			ret=1

			# First check to see if we found the right dir
			for name in "${BUILD_DIRS[@]}"; do
				bld=`echo "${rel}" | sed 's,[^\/]*\/,,'`

				if [ -e "${cwd}/${name}/${bld}/Makefile" ]; then
					ret=0
				fi
			done

			# Now repeat and try to build in each of the found directories
			if [ $ret -eq 0 ]; then
				for name in "${BUILD_DIRS[@]}"; do
					bld=`echo "${rel}" | sed 's,[^\/]*\/,,'`
					if [ -e "${cwd}/${name}/${bld}/Makefile" ]; then
						doBuild "${cwd}/${name}/${bld}" "-" $@ || ret=$?
					fi
				done

				exit $ret
			else
				# Find the matching path, and build (old style, ~/src and ~/build)
				bld=`echo "${cwd}" | sed 's/\/src\|svn\|git\//\/build\//'`


				if [ -e "${bld}/${BUILDNAME}/debug/${rel}/Makefile" ] || [ -e "${bld}/${BUILDNAME}/release/${rel}/Makefile" ] ; then
					ret=0

					doBuild "${bld}/${BUILDNAME}/debug/${rel}"		"-" $@ || ret=$?
					doBuild "${bld}/${BUILDNAME}/release/${rel}"	"-" $@ || ret=$?

					exit $ret
				fi
			fi
		else
			doBuild "${cwd}" "-" $@
			exit $?
		fi
	fi

	# Save the relative path
	rel="${nam}/${rel}"

	cwd=$par
done

echo $MAKEPRG $@
$MAKEPRG $@
exit $?

